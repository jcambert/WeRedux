@using Microsoft.JSInterop

@typeparam TState
@typeparam TAction



<h3>ReduxDevTools - @Message </h3>
@ChildContent


@code {
    [Parameter]
    public string  Name { get; set; }

    [Parameter]
    public int HistorySize { get; set; } = -1;
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public RenderFragment Script { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.addStore", DotNetObjectReference.Create(this),this.Name,this.ToString());

            Store.OnMutation.Subscribe(async (mutation) =>
            {
                await JSRuntime.InvokeVoidAsync($"window.weredux.{this.Name.ToLowerInvariant()}.onMutation", mutation);
            });
            Store.OnChanged.Subscribe(async(o) =>
            {
                await JSRuntime.InvokeVoidAsync($"window.weredux.{this.Name.ToLowerInvariant()}.onChanged", this.ToString());
            });
            Store.OnTimeTravel.Subscribe( (travel) => {
                if (!travel)
                    this.StateHasChanged();
            });
            Store.OnInitialStateChanged.Subscribe(async (State) =>
            {
                await JSRuntime.InvokeVoidAsync($"window.weredux.{this.Name.ToLowerInvariant()}.init", this.ToString());
            });
           // await JSRuntime.InvokeVoidAsync($"window.weredux[{this.Name}].init", this.ToString());
        }

    }



}
