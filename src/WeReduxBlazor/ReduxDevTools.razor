@using Microsoft.JSInterop

@typeparam TState
@typeparam TAction



<h3>ReduxDevTools - @Message </h3>
@ChildContent


@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public RenderFragment Script { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.setComponent", DotNetObjectReference.Create(this));

            Store.OnMutation.Subscribe(async (mutation) =>
            {
                await JSRuntime.InvokeVoidAsync("window.weredux.onMutation", mutation);
            });
            Store.OnChanged.Subscribe(async(o) =>
            {
                await JSRuntime.InvokeVoidAsync("window.weredux.onChanged", this.ToString());
            });

            await JSRuntime.InvokeVoidAsync("window.weredux.init", this.ToString());
        }

    }


    private RenderFragment JS => builder =>
    {

        var seq = 0;
        builder.OpenElement(seq++, "script");
        builder.AddContent(seq++, (MarkupString)@"");
        builder.CloseElement();
    };
}
